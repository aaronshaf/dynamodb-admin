<!DOCTYPE html>
<html lang="en">
<head>
  <% include ./partials/head %>
  <% include ./partials/bootstrap-deps %>
  <script src='/assets/vendor/json-formatter/json-formatter.js'></script>
  <style>
    .table-container {
      margin-bottom: 1rem;
      position: relative;
    }

    .scroll-indicator {
      height: 100%;
      position: absolute;
      width: 100%;
    }

    .scroll-indicator::before {
      background-image: linear-gradient(to right, rgba(146, 146, 146, 0.5), #fff);
      content: '';
      height: 100%;
      left: 0;
      position: absolute;
      width: 5px;
    }

    .scroll-indicator::after {
      background-image: linear-gradient(to left, rgba(146, 146, 146, 0.5), #fff);
      content: '';
      height: 100%;
      position: absolute;
      right: 0;
      width: 5px;
    }

    .table-wrapper {
      overflow-x: auto;
      position: relative;
    }

    .items-table {
      margin-bottom: 0;
      /* Need to reset max-width set by bootstrap to avoid
         problems with scroll indicator mask in Safari. */
      max-width: none;
      position: relative;
    }

    /* mask for scroll indicators */
    .items-table::before {
      background-image:
        linear-gradient(to right, #fff, #fff 5px, transparent 5px),
        linear-gradient(to left, #fff, #fff 5px, transparent 5px);
      content: '';
      height: 100%;
      left: 0;
      pointer-events: none;
      position: absolute;
      top: 0;
      width: 100%;
    }
  </style>
</head>
<body class="container-fluid">
  <header>
    <ol class="breadcrumb">
      <a class="breadcrumb-item" href="/">Tables</a>
      <a class="breadcrumb-item active">
        <%= Table.TableName %>
        <span class="badge badge-secondary badge-pill ml-1">
          <%= Table.ItemCount %>
        </span>
      </a>
    </ol>

    <ul class="nav nav-tabs">
      <li class="nav-item">
        <a class="nav-link active item-count" href="/tables/<%= Table.TableName %>">
          Scan
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/tables/<%= Table.TableName %>/get">
          Get
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/tables/<%= Table.TableName %>/meta">Meta</a>
      </li>
      <li class="nav-item ml-auto">
        <a href="/tables/<%= Table.TableName %>/add-item" class="nav-link">Create item</a>
      </li>
    </ul>
  </header>

  <main>
    <form
      autocomplete="off"
      action="/tables/<%= Table.TableName %>"
      method="get"
      style="padding-top: 20px;padding-bottom: 20px;"
      id="form"
    >
      <datalist id="attributes">
        <% for (let AttributeDefinition of Table.AttributeDefinitions) { %>
          <option value="<%= AttributeDefinition.AttributeName %>" />
        <% } %>
      </datalist>
      <table class="table table-bordered">
        <tbody>
          <tr>
            <th>Filter</th>
            <td>
              <table class="table table-bordered">
                <tbody>
                  <% for (let filterKey in filters) { %>
                    <tr>
                      <td style="width: 95px;">
                        <button type="button" onclick="removeFilter(this)" class='btn btn-danger'>Remove</button>
                      </td>
                      <td
                        style="width: 300px"
                      >
                        <input
                          data-filter-key
                          type="text"
                          class="form-control"
                          readonly
                          value="<%= filterKey %>"
                        />
                      </td>
                      <td>
                        <select class="form-control" readonly>
                          <option>=</option>
                        </select>
                      </td>
                      <td>
                        <input
                          type="text"
                          class="form-control"
                          placeholder="Value"
                          name="<%= filterKey %>"
                          value="<%= filters[filterKey] %>"
                        />
                      </td>
                    </tr>
                  <% } %>
                  <tr>
                    <td style="width: 95px;"></td>
                    <td style="width: 300px">
                      <input
                        data-filter-key
                        type="text"
                        class="form-control"
                        id="key"
                        placeholder="Key"
                        list="attributes"
                      />
                    </td>
                    <td>
                      <select class="form-control" readonly>
                        <option>=</option>
                      </select>
                    </td>
                    <td>
                      <input id="value" type="text" class="form-control" placeholder="Value" />
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
          </tr>
        </tbody>
      </table>
      <input id="param" type="hidden" />

      <div class="row">
        <div class="col-md-6">
          <button type="submit" class="btn btn-primary">Scan</button>
        </div>

        <div class="col-md-6 pagination-container d-none">
            <nav style="float: right">
              <ul class="pagination" style="margin: 0">
                <li class="page-item page-item-previous disabled">
                  <a class="page-link page-link-previous" href="#">Previous Page</a>
                </li>
                <li class="page-item active">
                  <span class="page-link">Page <%= pageNum %></span>
                </li>
                 <li class="page-item page-item-next disabled">
                   <a class="page-link page-link-next" href="#">Next Page</a>
                 </li>
              </ul>
           </nav>
        </div>
      </div>
    </form>

    <script>
    /* global JSONFormatter, $ */
    const JSONRender = value => new JSONFormatter.default(value).render()

    const form = document.querySelector('#form')
    form.addEventListener('submit', () => {
      form.param.setAttribute('name', form.key.value)
      form.param.value = form.value.value
    })
    function removeFilter (node) {
      node.closest('tr').remove()
    }

    function updateFilterAutocomplete(uniqueKeys) {
      const listContainer = $('#attributes')
      listContainer.empty()
      listContainer.append(uniqueKeys.map(key => $(`<option value="${key}"></option>`)))
    }

    function extractValue(attrMap) {
      if (!attrMap) {
        return undefined
      }
      const attrType = Object.keys(attrMap)[0]
      const rawValue = attrMap[attrType]
      if (attrType === 'N') {
        try {
          return BigInt(rawValue)
        } catch (error) {
          return Number(rawValue)
        }
      }
      return rawValue
    }

    function renderItems(data) {
      $('#actions-row').append(data.uniqueKeys.map(key => '<td>' + key + '</td>'))

      if (data.Items.length) {
        $('#items-container').append(data.Items.map(item => {
          const viewUrl = '/tables/<%= Table.TableName %>/items/' + encodeURIComponent(Object.values(item.__key).join(','))
          const rowEl = $('<tr><td><a href="' + viewUrl + '">View</a></td></tr>')

          for (const column of data.uniqueKeys) {
            const columnEl = $('<td></td>')

            const attrMap = item[column]
            const attrType = attrMap ? Object.keys(attrMap)[0] : null
            const value = extractValue(attrMap)

            let wrapperEl = null

            // TODO: fix "can't convert bigint to number"
            if (attrType === 'N' && value >= 0) {
              let dateValue
              try {
                dateValue = new Date(value).toISOString()
              } catch (error) {
                dateValue = error.message
              }

              wrapperEl = $('<abbr data-toggle="tooltip" data-placement="top" title="' + dateValue + '"></abbr>')
            } else {
              wrapperEl = $('<div class="preformatted"></div>')
            }

            rowEl.append(columnEl.append(wrapperEl.append(JSONRender(value))))
          }

          return rowEl
        }))

        if (data.pageNum > 1) {
          $('.page-link-previous')
            .attr('href', '?startKey=' + data.prevKey + '&pageNum=' + (data.pageNum-1) + '&'  + data.filterQueryString)
          $('.page-item-previous').removeClass('disabled')
        }

        if (data.nextKey) {
          $('.page-link-next')
            .attr('href', '?startKey=' + data.nextKey + '&prevKey=' + data.prevKey + '&pageNum=' + (data.pageNum+1) + '&'  + data.filterQueryString)
          $('.page-item-next').removeClass('disabled')
        }

        const rangeFrom = ((data.pageNum - 1) * 25) + 1
        const rangeTo = rangeFrom + (data.Items.length - 1)
        $('.item-count').append(' (showing items ' + rangeFrom + ' - ' + rangeTo + ')')

        $('.table-container').removeClass('d-none')
        $('.pagination-container').removeClass('d-none')
      } else {
        $('.no-results').removeClass('d-none')
      }

      $('#table-placeholder').addClass('d-none')

      updateFilterAutocomplete(data.uniqueKeys)
    }

    window.addEventListener('load', () => {
      fetch(document.location.pathname + '/items' + document.location.search)
        .then(response => response.json())
        .then(json => {
          renderItems(json)
        })
        .catch(error => {
          alert('Error loading data: ' + error)
        })
    })
    </script>

    <div id="table-placeholder" class="text-center">Loading data...</div>

    <div class="no-results text-danger text-center d-none">No results</div>

    <div class="table-container d-none">
      <div class="scroll-indicator"></div>
      <div class="table-wrapper">
        <table class="table items-table">
          <thead>
            <tr id="actions-row">
              <td>Actions</td>
            </tr>
          </thead>
          <tbody id="items-container">
          </tbody>
        </table>
      </div>
    </div>
  </main>
</body>
</html>
